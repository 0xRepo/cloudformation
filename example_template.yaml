AWSTemplateFormatVersion: "2010-09-09"
Description: "A lambda function in the development/test/production environment"

Parameters:
  AdminRoleNameParameter:
    Description: "The name of the IAM role used by administrators"
    Type: "String"
    AllowedValues: 
      - "AdminRole"
      - "TestAdminRole"
  EnvironmentParameter:
    Description: "The environment that this stack is running in"
    Type: "String"
    AllowedValues: 
      - "development"
      - "test"
      - "production"
    
Resources:
  ExampleIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: |
        Used by ExamplelambdaFunction. The IAM role needs to account for the following
        The lambda function will output logs which developers will need to see later in Cloudwatch.
        The lambda function needs to be able to create secrets values in AWS Secrets Manager. It should have full access to the secret. However it does not need to read the secret. The names of these secrets must be restricted to start with the environment name, depending on the value passed into the EnvironmentParameter value of the stack.
        The lambda function will encrypt using the KMS key.
        The IAM role's path needs to be passed into the template as a Cloudformation parameter.
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal: 
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  ExampleRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
        PolicyName: "ExampleIAMRolePolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: "Allow"
              Action: "secretsmanager:CreateSecret"
              Resource: !GetAtt ExampleIAMRole.Arn
          Roles:
            -
              Ref: "ExampleIAMRole"
        Tags:
          -
            Key: "Environment"
            Value: !Ref EnvironmentParameter
          - 
            Key: "ResourceName"
            Value: "ExampleIAMRole"
      
  ExampleLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: |
        The FunctionName of the lambda function needs to be set to the correct value of "development-example-lambda" or "test-example-lambda" or "production-example-lambda"
        Add a tag to the lambda function with a key of "Stack" and a value set to the stack name.
        The lambda function needs to know which environment (development/test/production) it is running in. Pass in the value into an environment variable named RUNNING_ENVIRONMENT.
      Code:
        ZipFile: "Code goes here"
      Description: "A lambda function"
      Handler: "index.handler"
      Role: !Ref ExampleIAMRole
      MemorySize: "128"
      Runtime: "python3.8"
      Tags:
        - 
          Key: "Environment"
          Value: !Ref EnvironmentParameter
        -
          Key: "ResourceName"
          Value: "ExampleLambdaFunction"
        -
          Key: "Stack"
          Value: !Ref AWS::StackName
      Timeout: "5"

  ExampleKMSKey:
    Type: "AWS::KMS::Key"
    Properties: 
      Description: "KMS key used by lambda to encrypt secrets created. complete access by the AWS account root user"
      Enabled: "true"
      EnableKeyRotation: "false"
      KeyPolicy:
        Version: "2012-10-17"
        id: "key-default"
        Statement:
        - Sid: "Allow use of the key"
          Effect: Allow
          Principal:
            AWS: arn:aws:iam::123456789012:user/Bob
          Action:
          - kms:DescribeKey*
          - kms:Encrypt*
          - kms:Decrypt*
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:GenerateDataKeyWithoutPlaintext*
          Resource: !Ref 'ExampleLambdaFunction'
        
      KeyUsage: "ENCRYPT_DECRYPT"
      PendingWindowInDays: "7"
      Tags: 
        - 
          Key: "Environment"
          Value: !Ref EnvironmentParameter
        -
          Key: "ResourceName"
          Value: "ExampleKMSKey"

  ExampleManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "allowing access to encrypt with the KMS key"
      ManagedPolicyName: "ExampleManagedPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: "Allow"
              Action: "kms:Encrypt"
              Resource: !Ref ExampleKMSKey
              Condition:
                StringEquals: !Join                
                  - ""
                  - - "arn:aws:iam:"
                    - ":"
                    - !Ref "AWS::AccountId"
                    - ":root"

Outputs:
  ManagedPolicyARN:
    Description: Outputs the arn of the managed policy
    Value: !Ref ExampleManagedPolicy
    Export: 
      Name: !Sub "${AWS::StackName}-ManagedPolicy"